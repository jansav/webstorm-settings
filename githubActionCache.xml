<application>
  <component name="GitHubActionCache">
    <option name="actions">
      <map>
        <entry key="$USER_HOME$/dev/lens-desktop-monorepo-for-master/.github/workflows/create-release-in-github.yaml">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="COMMIT" value="r[true] " />
                  <entry key="LENS_DESKTOP_VERSION" value="r[true] " />
                  <entry key="LENS_ENV" value="r[true] " />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="$USER_HOME$/dev/lens-desktop-monorepo-for-master/.github/workflows/create-release-in-github.yaml" />
                  <entry key="expiryTime" value="1726480266284" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="true" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="./.github/workflows/create-release-in-github.yaml" />
                  <entry key="usesValue" value="./.github/workflows/create-release-in-github.yaml" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="VERSION" value="" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/cache@v3">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="enableCrossOsArchive" value="r[false] def[false] An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms" />
                  <entry key="fail-on-cache-miss" value="r[false] def[false] Fail the workflow if cache entry is not found" />
                  <entry key="key" value="r[true]  An explicit key for restoring and saving the cache" />
                  <entry key="lookup-only" value="r[false] def[false] Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache" />
                  <entry key="path" value="r[true]  A list of files, directories, and wildcard patterns to cache and restore" />
                  <entry key="restore-keys" value="r[false]  An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case." />
                  <entry key="upload-chunk-size" value="r[false]  The chunk size used to split up large files during upload, in bytes" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/cache/v3/action.yml" />
                  <entry key="expiryTime" value="1726480266283" />
                  <entry key="githubUrl" value="https://github.com/actions/cache/tree/v3#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/cache" />
                  <entry key="usesValue" value="actions/cache@v3" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="cache-hit" value=" A boolean value to indicate an exact match was found for the primary key" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/checkout@v4">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="clean" value="r[false] def[true] Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching" />
                  <entry key="fetch-depth" value="r[false] def[1] Number of commits to fetch. 0 indicates all history for all branches and tags." />
                  <entry key="fetch-tags" value="r[false] def[false] Whether to fetch tags, even if fetch-depth &gt; 0." />
                  <entry key="filter" value="r[false] def[null]" />
                  <entry key="github-server-url" value="r[false]  The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com" />
                  <entry key="lfs" value="r[false] def[false] Whether to download Git-LFS files" />
                  <entry key="path" value="r[false]  Relative path under $GITHUB_WORKSPACE to place the repository" />
                  <entry key="persist-credentials" value="r[false] def[true] Whether to configure the token or SSH key with the local git config" />
                  <entry key="ref" value="r[false] " />
                  <entry key="repository" value="r[false] def[${{ github.repository }}] Repository name with owner. For example, actions/checkout" />
                  <entry key="set-safe-directory" value="r[false] def[true] Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`" />
                  <entry key="show-progress" value="r[false] def[true] Whether to show progress status output when fetching." />
                  <entry key="sparse-checkout" value="r[false] def[null]" />
                  <entry key="sparse-checkout-cone-mode" value="r[false] def[true]" />
                  <entry key="ssh-key" value="r[false] " />
                  <entry key="ssh-known-hosts" value="r[false] " />
                  <entry key="ssh-strict" value="r[false] def[true]" />
                  <entry key="ssh-user" value="r[false] def[git]" />
                  <entry key="submodules" value="r[false] def[false]" />
                  <entry key="token" value="r[false] def[${{ github.token }}]" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/checkout/v4/action.yml" />
                  <entry key="expiryTime" value="1726480266281" />
                  <entry key="githubUrl" value="https://github.com/actions/checkout/tree/v4#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/checkout" />
                  <entry key="usesValue" value="actions/checkout@v4" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-go@v2">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-go/v2/action.yml" />
                  <entry key="expiryTime" value="1726480351524" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-go/tree/v2#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-go" />
                  <entry key="usesValue" value="actions/setup-go@v2" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-go@v3">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="architecture" value="r[false]  Target architecture for Go to use. Examples: x86, x64. Will use system architecture by default." />
                  <entry key="cache" value="r[false] def[false] Used to specify whether caching is needed. Set to true, if you'd like to enable caching." />
                  <entry key="cache-dependency-path" value="r[false]  Used to specify the path to a dependency file - go.sum" />
                  <entry key="check-latest" value="r[false] def[false] Set this option to true if you want the action to always check for the latest available version that satisfies the version spec" />
                  <entry key="go-version" value="r[false]  The Go version to download (if necessary) and use. Supports semver spec and ranges." />
                  <entry key="go-version-file" value="r[false]  Path to the go.mod or go.work file." />
                  <entry key="token" value="r[false] def[${{ github.server_url == 'https://github.com' &amp;&amp; github.token || '' }}] Used to pull node distributions from go-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting." />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-go/v3/action.yml" />
                  <entry key="expiryTime" value="1726480266282" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-go/tree/v3#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-go" />
                  <entry key="usesValue" value="actions/setup-go@v3" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="cache-hit" value=" A boolean value to indicate if a cache was hit" />
                  <entry key="go-version" value=" The installed Go version. Useful when given a version range as input." />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-node@v4">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="always-auth" value="r[false] def[false] Set always-auth in npmrc." />
                  <entry key="architecture" value="r[false]  Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default." />
                  <entry key="cache" value="r[false]  Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm." />
                  <entry key="cache-dependency-path" value="r[false]  Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies." />
                  <entry key="check-latest" value="r[false] def[false] Set this option if you want the action to check for the latest available version that satisfies the version spec." />
                  <entry key="node-version" value="r[false]  Version Spec of the version to use. Examples: 12.x, 10.15.1, &gt;=10.15.0." />
                  <entry key="node-version-file" value="r[false]  File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions." />
                  <entry key="registry-url" value="r[false]  Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN." />
                  <entry key="scope" value="r[false]  Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/)." />
                  <entry key="token" value="r[false] def[${{ github.server_url == 'https://github.com' &amp;&amp; github.token || '' }}] Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting." />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-node/v4/action.yml" />
                  <entry key="expiryTime" value="1726480266282" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-node/tree/v4#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-node" />
                  <entry key="usesValue" value="actions/setup-node@v4" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="cache-hit" value=" A boolean value to indicate if a cache was hit." />
                  <entry key="node-version" value=" The installed node version." />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/setup-python@v2">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="architecture" value="r[false]  The target architecture (x86, x64) of the Python interpreter." />
                  <entry key="cache" value="r[false]  Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv." />
                  <entry key="cache-dependency-path" value="r[false]  Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies." />
                  <entry key="python-version" value="r[false] def[3.x] Version range or exact version of a Python version to use, using SemVer's version range syntax." />
                  <entry key="token" value="r[false] def[${{ github.token }}] Used to pull python distributions from actions/python-versions. Since there's a default, this is typically not supplied by the user." />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/setup-python/v2/action.yml" />
                  <entry key="expiryTime" value="1726480266283" />
                  <entry key="githubUrl" value="https://github.com/actions/setup-python/tree/v2#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/setup-python" />
                  <entry key="usesValue" value="actions/setup-python@v2" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="python-version" value=" The installed python version. Useful when given a version range as input." />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/stale@v4">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="any-of-issue-labels" value="r[false]  Only issues with at least one of these labels are checked if stale. Defaults to `` (disabled) and can be a comma-separated list of labels. Override &quot;any-of-labels&quot; option regarding only the issues." />
                  <entry key="any-of-labels" value="r[false]  Only issues or pull requests with at least one of these labels are checked if stale. Defaults to `` (disabled) and can be a comma-separated list of labels." />
                  <entry key="any-of-pr-labels" value="r[false]  Only pull requests with at least one of these labels are checked if stale. Defaults to `` (disabled) and can be a comma-separated list of labels. Override &quot;any-of-labels&quot; option regarding only the pull requests." />
                  <entry key="ascending" value="r[false] def[false] The order to get issues or pull requests. Defaults to false, which is descending." />
                  <entry key="close-issue-label" value="r[false]  The label to apply when an issue is closed." />
                  <entry key="close-issue-message" value="r[false]  The message to post on the issue when closing it. If none provided, will not comment when closing an issue." />
                  <entry key="close-pr-label" value="r[false]  The label to apply when a pull request is closed." />
                  <entry key="close-pr-message" value="r[false]  The message to post on the pull request when closing it. If none provided, will not comment when closing a pull requests." />
                  <entry key="days-before-close" value="r[false] def[7] The number of days to wait to close an issue or a pull request after it being marked stale. Set to -1 to never close stale issues or pull requests." />
                  <entry key="days-before-issue-close" value="r[false]  The number of days to wait to close an issue after it being marked stale. Set to -1 to never close stale issues. Override &quot;days-before-close&quot; option regarding only the issues." />
                  <entry key="days-before-issue-stale" value="r[false]  The number of days old an issue can be before marking it stale. Set to -1 to never mark issues as stale automatically. Override &quot;days-before-stale&quot; option regarding only the issues." />
                  <entry key="days-before-pr-close" value="r[false]  The number of days to wait to close a pull request after it being marked stale. Set to -1 to never close stale pull requests. Override &quot;days-before-close&quot; option regarding only the pull requests." />
                  <entry key="days-before-pr-stale" value="r[false]  The number of days old a pull request can be before marking it stale. Set to -1 to never mark pull requests as stale automatically. Override &quot;days-before-stale&quot; option regarding only the pull requests." />
                  <entry key="days-before-stale" value="r[false] def[60] The number of days old an issue or a pull request can be before marking it stale. Set to -1 to never mark issues or pull requests as stale automatically." />
                  <entry key="debug-only" value="r[false] def[false] Run the processor in debug mode without actually performing any operations on live issues." />
                  <entry key="delete-branch" value="r[false] def[false] Delete the git branch after closing a stale pull request." />
                  <entry key="enable-statistics" value="r[false] def[true] Display some statistics at the end regarding the stale workflow (only when the logs are enabled)." />
                  <entry key="exempt-all-assignees" value="r[false] def[false] Exempt all issues and pull requests with assignees from being marked as stale. Default to false." />
                  <entry key="exempt-all-issue-assignees" value="r[false]  Exempt all issues with assignees from being marked as stale. Override &quot;exempt-all-assignees&quot; option regarding only the issues." />
                  <entry key="exempt-all-issue-milestones" value="r[false]  Exempt all issues with milestones from being marked as stale. Override &quot;exempt-all-milestones&quot; option regarding only the issues." />
                  <entry key="exempt-all-milestones" value="r[false] def[false] Exempt all issues and pull requests with milestones from being marked as stale. Default to false." />
                  <entry key="exempt-all-pr-assignees" value="r[false]  Exempt all pull requests with assignees from being marked as stale. Override &quot;exempt-all-assignees&quot; option regarding only the pull requests." />
                  <entry key="exempt-all-pr-milestones" value="r[false]  Exempt all pull requests with milestones from being marked as stale. Override &quot;exempt-all-milestones&quot; option regarding only the pull requests." />
                  <entry key="exempt-assignees" value="r[false]  The assignees which exempt an issue or a pull request from being marked as stale. Separate multiple assignees with commas (eg. &quot;user1,user2&quot;)." />
                  <entry key="exempt-draft-pr" value="r[false] def[false] Exempt draft pull requests from being marked as stale. Default to false." />
                  <entry key="exempt-issue-assignees" value="r[false]  The assignees which exempt an issue from being marked as stale. Separate multiple assignees with commas (eg. &quot;user1,user2&quot;). Override &quot;exempt-assignees&quot; option regarding only the issues." />
                  <entry key="exempt-issue-labels" value="r[false]  The labels that mean an issue is exempt from being marked stale. Separate multiple labels with commas (eg. &quot;label1,label2&quot;)." />
                  <entry key="exempt-issue-milestones" value="r[false]  The milestones that mean an issue is exempt from being marked as stale. Separate multiple milestones with commas (eg. &quot;milestone1,milestone2&quot;). Override &quot;exempt-milestones&quot; option regarding only the issues." />
                  <entry key="exempt-milestones" value="r[false]  The milestones that mean an issue or a pull request is exempt from being marked as stale. Separate multiple milestones with commas (eg. &quot;milestone1,milestone2&quot;)." />
                  <entry key="exempt-pr-assignees" value="r[false]  The assignees which exempt a pull request from being marked as stale. Separate multiple assignees with commas (eg. &quot;user1,user2&quot;). Override &quot;exempt-assignees&quot; option regarding only the pull requests." />
                  <entry key="exempt-pr-labels" value="r[false]  The labels that mean a pull request is exempt from being marked as stale. Separate multiple labels with commas (eg. &quot;label1,label2&quot;)." />
                  <entry key="exempt-pr-milestones" value="r[false]  The milestones that mean a pull request is exempt from being marked as stale. Separate multiple milestones with commas (eg. &quot;milestone1,milestone2&quot;). Override &quot;exempt-milestones&quot; option regarding only the pull requests." />
                  <entry key="ignore-issue-updates" value="r[false]  Any update (update/comment) can reset the stale idle time on the issues. Override &quot;ignore-updates&quot; option regarding only the issues." />
                  <entry key="ignore-pr-updates" value="r[false]  Any update (update/comment) can reset the stale idle time on the pull requests. Override &quot;ignore-updates&quot; option regarding only the pull requests." />
                  <entry key="ignore-updates" value="r[false] def[false] Any update (update/comment) can reset the stale idle time on the issues and pull requests." />
                  <entry key="labels-to-add-when-unstale" value="r[false]  A comma delimited list of labels to add when a stale issue or pull request receives activity and has the stale-issue-label or stale-pr-label removed from it." />
                  <entry key="labels-to-remove-when-unstale" value="r[false]  A comma delimited list of labels to remove when a stale issue or pull request receives activity and has the stale-issue-label or stale-pr-label removed from it." />
                  <entry key="only-issue-labels" value="r[false]  Only issues with all of these labels are checked if stale. Defaults to `[]` (disabled) and can be a comma-separated list of labels. Override &quot;only-labels&quot; option regarding only the issues." />
                  <entry key="only-labels" value="r[false]  Only issues or pull requests with all of these labels are checked if stale. Defaults to `` (disabled) and can be a comma-separated list of labels." />
                  <entry key="only-pr-labels" value="r[false]  Only pull requests with all of these labels are checked if stale. Defaults to `[]` (disabled) and can be a comma-separated list of labels. Override &quot;only-labels&quot; option regarding only the pull requests." />
                  <entry key="operations-per-run" value="r[false] def[30] The maximum number of operations per run, used to control rate limiting (GitHub API CRUD related)." />
                  <entry key="remove-issue-stale-when-updated" value="r[false]  Remove stale labels from issues when they are updated or commented on. Override &quot;remove-stale-when-updated&quot; option regarding only the issues." />
                  <entry key="remove-pr-stale-when-updated" value="r[false]  Remove stale labels from pull requests when they are updated or commented on. Override &quot;remove-stale-when-updated&quot; option regarding only the pull requests." />
                  <entry key="remove-stale-when-updated" value="r[false] def[true] Remove stale labels from issues and pull requests when they are updated or commented on." />
                  <entry key="repo-token" value="r[false] def[${{ github.token }}] Token for the repository. Can be passed in using `{{ secrets.GITHUB_TOKEN }}`." />
                  <entry key="stale-issue-label" value="r[false] def[Stale] The label to apply when an issue is stale." />
                  <entry key="stale-issue-message" value="r[false]  The message to post on the issue when tagging it. If none provided, will not mark issues stale." />
                  <entry key="stale-pr-label" value="r[false] def[Stale] The label to apply when a pull request is stale." />
                  <entry key="stale-pr-message" value="r[false]  The message to post on the pull request when tagging it. If none provided, will not mark pull requests stale." />
                  <entry key="start-date" value="r[false]  The date used to skip the stale action on issue/pull request created before it (ISO 8601 or RFC 2822)." />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/stale/v4/action.yml" />
                  <entry key="expiryTime" value="1726480342216" />
                  <entry key="githubUrl" value="https://github.com/actions/stale/tree/v4#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/stale" />
                  <entry key="usesValue" value="actions/stale@v4" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="closed-issues-prs" value=" List of all closed issues and pull requests." />
                  <entry key="staled-issues-prs" value=" List of all staled issues and pull requests." />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="actions/upload-artifact@v4">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="compression-level" value="r[false] def[6]" />
                  <entry key="if-no-files-found" value="r[false] def[warn]" />
                  <entry key="name" value="r[false] def[artifact] Artifact name" />
                  <entry key="overwrite" value="r[false] def[false]" />
                  <entry key="path" value="r[true]  A file, directory or wildcard pattern that describes what to upload" />
                  <entry key="retention-days" value="r[false] " />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/actions/upload-artifact/v4/action.yml" />
                  <entry key="expiryTime" value="1726480338998" />
                  <entry key="githubUrl" value="https://github.com/actions/upload-artifact/tree/v4#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="actions/upload-artifact" />
                  <entry key="usesValue" value="actions/upload-artifact@v4" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="artifact-id" value="" />
                  <entry key="artifact-url" value="" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="aws-actions/configure-aws-credentials@v4">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="audience" value="r[false] def[sts.amazonaws.com] The audience to use for the OIDC provider" />
                  <entry key="aws-access-key-id" value="r[false]  AWS Access Key ID. Provide this key if you want to assume a role using access keys rather than a web identity token." />
                  <entry key="aws-region" value="r[true]  AWS Region, e.g. us-east-2" />
                  <entry key="aws-secret-access-key" value="r[false]  AWS Secret Access Key. Required if aws-access-key-id is provided." />
                  <entry key="aws-session-token" value="r[false]  AWS Session Token." />
                  <entry key="disable-retry" value="r[false]  Whether to disable the retry and backoff mechanism when the assume role call fails. By default the retry mechanism is enabled" />
                  <entry key="http-proxy" value="r[false]  Proxy to use for the AWS SDK agent" />
                  <entry key="inline-session-policy" value="r[false]  Define an inline session policy to use when assuming a role" />
                  <entry key="managed-session-policies" value="r[false]  Define a list of managed session policies to use when assuming a role" />
                  <entry key="mask-aws-account-id" value="r[false]  Whether to mask the AWS account ID for these credentials as a secret value. By default the account ID will not be masked" />
                  <entry key="output-credentials" value="r[false]  Whether to set credentials as step output" />
                  <entry key="retry-max-attempts" value="r[false]  The maximum number of attempts it will attempt to retry the assume role call. By default it will retry 12 times" />
                  <entry key="role-chaining" value="r[false]  Use existing credentials from the environment to assume a new role, rather than providing credentials as input." />
                  <entry key="role-duration-seconds" value="r[false]  Role duration in seconds. Default is one hour." />
                  <entry key="role-external-id" value="r[false]  The external ID of the role to assume." />
                  <entry key="role-session-name" value="r[false]  Role session name (default: GitHubActions)" />
                  <entry key="role-skip-session-tagging" value="r[false]  Skip session tagging during role assumption" />
                  <entry key="role-to-assume" value="r[false]  The Amazon Resource Name (ARN) of the role to assume. Use the provided credentials to assume an IAM role and configure the Actions environment with the assumed role credentials rather than with the provided credentials." />
                  <entry key="special-characters-workaround" value="r[false]  Some environments do not support special characters in AWS_SECRET_ACCESS_KEY. This option will retry fetching credentials until the secret access key does not contain special characters. This option overrides disable-retry and retry-max-attempts. This option is disabled by default" />
                  <entry key="unset-current-credentials" value="r[false]  Whether to unset the existing credentials in your runner. May be useful if you run this action multiple times in the same job" />
                  <entry key="web-identity-token-file" value="r[false]  Use the web identity token file from the provided file system path in order to assume an IAM role using a web identity, e.g. from within an Amazon EKS worker node." />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/aws-actions/configure-aws-credentials/v4/action.yml" />
                  <entry key="expiryTime" value="1726480344625" />
                  <entry key="githubUrl" value="https://github.com/aws-actions/configure-aws-credentials/tree/v4#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="aws-actions/configure-aws-credentials" />
                  <entry key="usesValue" value="aws-actions/configure-aws-credentials@v4" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="aws-access-key-id" value=" The AWS access key ID for the provided credentials" />
                  <entry key="aws-account-id" value=" The AWS account ID for the provided credentials" />
                  <entry key="aws-secret-access-key" value=" The AWS secret access key for the provided credentials" />
                  <entry key="aws-session-token" value=" The AWS session token for the provided credentials" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="crazy-max/ghaction-virustotal@v3">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="files" value="r[true]  Newline-delimited list of path globs for asset files to upload for analysis" />
                  <entry key="github_token" value="r[false] def[${{ github.token }}] The GitHub token used to create an authenticated client for GitHub API" />
                  <entry key="monitor_path" value="r[false] def[/] A path relative to current monitor user root folder to upload files" />
                  <entry key="request_rate" value="r[true] def[0] API request-rate in requests/minute" />
                  <entry key="update_release_body" value="r[true] def[false] If enabled, analysis link(s) will be appended to the release body" />
                  <entry key="vt_api_key" value="r[true]  The GitHub token used to create an authenticated client for GitHub API" />
                  <entry key="vt_monitor" value="r[false] def[false] If enabled, files will be uploaded to VirusTotal Monitor endpoint" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/crazy-max/ghaction-virustotal/v3/action.yml" />
                  <entry key="expiryTime" value="1726480266283" />
                  <entry key="githubUrl" value="https://github.com/crazy-max/ghaction-virustotal/tree/v3#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="crazy-max/ghaction-virustotal" />
                  <entry key="usesValue" value="crazy-max/ghaction-virustotal@v3" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="analysis" value=" Analysis results formatted as asset=analysisURL (comma separated)" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="medyagh/setup-minikube@master">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="addons" value="r[false]  Choose optional addons to install. Valid options: ingress, gcp-auth, registry ..." />
                  <entry key="cache" value="r[false] def[true] Cache ISO, kicbase, and preloads to speed up starting minikube" />
                  <entry key="cni" value="r[false]  CNI plug-in to use. Valid options: auto, bridge, calico, cilium, flannel, kindnet, or path to a CNI manifest" />
                  <entry key="container-runtime" value="r[false]  Choose a specific container-runtime, one of: docker, containerd, cri-o" />
                  <entry key="cpus" value="r[false]  Number of CPUs allocated to Kubernetes. Use &quot;max&quot; to use the maximum number of CPUs." />
                  <entry key="driver" value="r[false]  Choose a specific driver, one of: docker, none, podman, virtualbox, parallels, vmwarefusion, hyperkit, vmware, ssh" />
                  <entry key="extra-config" value="r[false]  Extra configuration (--extra-config) to pass into &quot;minikube start&quot;." />
                  <entry key="feature-gates" value="r[false]  Enabling feature gates (--feature-gates) to pass into &quot;minikube start&quot; in a format it accepts it." />
                  <entry key="insecure-registry" value="r[false]  Enable insecure communication with the given registries" />
                  <entry key="install-path" value="r[false]  Path where the executables (minikube) will get installed. Useful when having multiple self-hosted runners on one machine." />
                  <entry key="kubernetes-version" value="r[false]  Choose a specific version of Kubernetes, &quot;stable&quot; for the latest stable build, or &quot;latest&quot; for the latest development build" />
                  <entry key="listen-address" value="r[false]  IP Address to use to expose ports (docker and podman driver only)" />
                  <entry key="memory" value="r[false]  Amount of RAM to allocate to Kubernetes (format: &lt;number&gt;[&lt;unit&gt;], where unit = b, k, m or g). Use &quot;max&quot; to use the maximum amount of memory." />
                  <entry key="minikube-version" value="r[false] def[latest] Choose a specific version of minikube, &quot;latest&quot; for the latest stable build, or &quot;HEAD&quot; for the latest development build" />
                  <entry key="mount-path" value="r[false]  Mount the source directory from your host into the target directory inside the cluster (format: &lt;source directory&gt;:&lt;target directory&gt;)" />
                  <entry key="network-plugin" value="r[false]  Kubelet network plug-in to use (default: auto). Valid options: cni" />
                  <entry key="start" value="r[false] def[true] Start minikube after install is complete" />
                  <entry key="start-args" value="r[false]  Any flags you would regularly pass into minikube via CLI, seperated by space" />
                  <entry key="wait" value="r[false] def[all] comma separated list of Kubernetes components to verify and wait for after starting a cluster. defaults to &quot;apiserver,system_pods&quot;, available options: &quot;apiserver,system_pods,default_sa,apps_running,node_ready,kubelet&quot;. Other acceptable values are &quot;all&quot; or &quot;none&quot;, &quot;true&quot; and &quot;false&quot;" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/medyagh/setup-minikube/master/action.yml" />
                  <entry key="expiryTime" value="1726480266283" />
                  <entry key="githubUrl" value="https://github.com/medyagh/setup-minikube/tree/master#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="medyagh/setup-minikube" />
                  <entry key="usesValue" value="medyagh/setup-minikube@master" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="ncipollo/release-action@v1">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="allowUpdates" value="r[false]  An optional flag which indicates if we should update a release if it already exists. Defaults to false." />
                  <entry key="artifact" value="r[false]  An optional set of paths representing artifacts to upload to the release. This may be a single path or a comma delimited list of paths (or globs)" />
                  <entry key="artifactContentType" value="r[false]  The content type of the artifact. Defaults to raw" />
                  <entry key="artifactErrorsFailBuild" value="r[false]  An optional flag which indicates if artifact read or upload errors should fail the build." />
                  <entry key="artifacts" value="r[false]  An optional set of paths representing artifacts to upload to the release. This may be a single path or a comma delimited list of paths (or globs)" />
                  <entry key="body" value="r[false]  An optional body for the release." />
                  <entry key="bodyFile" value="r[false]  An optional body file for the release. This should be the path to the file" />
                  <entry key="commit" value="r[false]  An optional commit reference. This will be used to create the tag if it does not exist." />
                  <entry key="discussionCategory" value="r[false]  When provided this will generate a discussion of the specified category. The category must exist otherwise this will cause the action to fail. This isn't used with draft releases" />
                  <entry key="draft" value="r[false]  Optionally marks this release as a draft release. Set to true to enable." />
                  <entry key="generateReleaseNotes" value="r[false] def[false] Indicates if release notes should be automatically generated." />
                  <entry key="makeLatest" value="r[false] def[legacy] Indicates if the release should be the &quot;latest&quot; release or not." />
                  <entry key="name" value="r[false]  An optional name for the release. If this is omitted the tag will be used." />
                  <entry key="omitBody" value="r[false] def[false] Indicates if the release body should be omitted." />
                  <entry key="omitBodyDuringUpdate" value="r[false] def[false] Indicates if the release body should be omitted during updates. The body will still be applied for newly created releases. This will preserve the existing body during updates." />
                  <entry key="omitDraftDuringUpdate" value="r[false] def[false] Indicates if the draft flag should be omitted during updates. The draft flag will still be applied for newly created releases. This will preserve the existing draft state during updates." />
                  <entry key="omitName" value="r[false] def[false] Indicates if the release name should be omitted." />
                  <entry key="omitNameDuringUpdate" value="r[false] def[false] Indicates if the release name should be omitted during updates. The name will still be applied for newly created releases. This will preserve the existing name during updates." />
                  <entry key="omitPrereleaseDuringUpdate" value="r[false] def[false] Indicates if the prerelease flag should be omitted during updates. The prerelease flag will still be applied for newly created releases. This will preserve the existing prerelease state during updates." />
                  <entry key="owner" value="r[false]  Optionally specify the owner of the repo where the release should be generated. Defaults to current repo's owner." />
                  <entry key="prerelease" value="r[false]  Optionally marks this release as prerelease. Set to true to enable." />
                  <entry key="removeArtifacts" value="r[false] def[false] Indicates if existing release artifacts should be removed, Defaults to false." />
                  <entry key="replacesArtifacts" value="r[false] def[true] Indicates if existing release artifacts should be replaced. Defaults to true." />
                  <entry key="repo" value="r[false]  Optionally specify the repo where the release should be generated. Defaults to current repo" />
                  <entry key="skipIfReleaseExists" value="r[false] def[false] When skipIfReleaseExists is enabled the action will be skipped if a non-draft release already exists for the provided tag." />
                  <entry key="tag" value="r[false]  An optional tag for the release. If this is omitted the git ref will be used (if it is a tag)." />
                  <entry key="token" value="r[false] def[${{ github.token }}] The Github token." />
                  <entry key="updateOnlyUnreleased" value="r[false] def[false] When allowUpdates is enabled, this will fail the action if the release it is updating is not a draft or a prerelease." />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/ncipollo/release-action/v1/action.yml" />
                  <entry key="expiryTime" value="1726480266282" />
                  <entry key="githubUrl" value="https://github.com/ncipollo/release-action/tree/v1#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="ncipollo/release-action" />
                  <entry key="usesValue" value="ncipollo/release-action@v1" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="html_url" value=" The HTML URL of the release." />
                  <entry key="id" value=" The identifier of the created release." />
                  <entry key="upload_url" value=" The URL for uploading assets to the release." />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="nick-fields/retry@v3">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="command" value="r[true]  The command to run" />
                  <entry key="continue_on_error" value="r[false] def[false] Exits successfully even if an error occurs.  Same as native continue-on-error behavior, but for use in composite actions. Default is false" />
                  <entry key="max_attempts" value="r[true] def[3] Number of attempts to make before failing the step" />
                  <entry key="new_command_on_retry" value="r[false]  Command to run if the first attempt fails. This command will be called on all subsequent attempts." />
                  <entry key="on_retry_command" value="r[false]  Command to run before a retry (such as a cleanup script).  Any error thrown from retry command is caught and surfaced as a warning." />
                  <entry key="polling_interval_seconds" value="r[false] def[1] Number of seconds to wait for each check that command has completed running" />
                  <entry key="retry_on" value="r[false]  Event to retry on.  Currently supported [any, timeout, error]" />
                  <entry key="retry_on_exit_code" value="r[false]  Specific exit code to retry on. This will only retry for the given error code and fail immediately other error codes." />
                  <entry key="retry_wait_seconds" value="r[false] def[10] Number of seconds to wait before attempting the next retry" />
                  <entry key="shell" value="r[false]  Alternate shell to use (defaults to powershell on windows, bash otherwise).  Supports bash, python, pwsh, sh, cmd, and powershell" />
                  <entry key="timeout_minutes" value="r[false]  Minutes to wait before attempt times out.  Must only specify either minutes or seconds" />
                  <entry key="timeout_seconds" value="r[false]  Seconds to wait before attempt times out.  Must only specify either minutes or seconds" />
                  <entry key="warning_on_retry" value="r[false] def[true] Whether to output a warning on retry, or just output to info. Defaults to true" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/nick-fields/retry/v3/action.yml" />
                  <entry key="expiryTime" value="1726480266282" />
                  <entry key="githubUrl" value="https://github.com/nick-fields/retry/tree/v3#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="nick-fields/retry" />
                  <entry key="usesValue" value="nick-fields/retry@v3" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="exit_code" value=" The final exit code returned by the command" />
                  <entry key="exit_error" value=" The final error returned by the command" />
                  <entry key="total_attempts" value=" The final number of attempts made" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
        <entry key="robinraju/release-downloader@v1.5">
          <value>
            <GitHubAction>
              <option name="action" value="true" />
              <option name="inputs">
                <map>
                  <entry key="fileName" value="r[false] def[*] Name of the file to download (use '*' to download all assets other than tarball or zipball)" />
                  <entry key="github-api-url" value="r[false] def[https://api.github.com] The URL of the Github API, only use this input if you are using Github Enterprise" />
                  <entry key="latest" value="r[false] def[false] A flag to choose between latest release and remaining releases" />
                  <entry key="out-file-path" value="r[true] def[.] Relative path under $GITHUB_WORKSPACE to place the downloaded files" />
                  <entry key="repository" value="r[false] def[${{ github.repository }}] The source repository path. Expected format {owner}/{repo}" />
                  <entry key="tag" value="r[false]  The github tag to download the release from" />
                  <entry key="tarBall" value="r[false] def[false] Download tarball from assets" />
                  <entry key="token" value="r[false] def[${{ github.token }}] Github token to access private repos" />
                  <entry key="zipBall" value="r[false] def[false] Download zipball from assets" />
                </map>
              </option>
              <option name="metaData">
                <map>
                  <entry key="downloadUrl" value="https://raw.githubusercontent.com/robinraju/release-downloader/v1.5/action.yml" />
                  <entry key="expiryTime" value="1726480266283" />
                  <entry key="githubUrl" value="https://github.com/robinraju/release-downloader/tree/v1.5#readme" />
                  <entry key="isAction" value="true" />
                  <entry key="isLocal" value="false" />
                  <entry key="isResolved" value="true" />
                  <entry key="isSuppressed" value="false" />
                  <entry key="name" value="robinraju/release-downloader" />
                  <entry key="usesValue" value="robinraju/release-downloader@v1.5" />
                </map>
              </option>
              <option name="outputs">
                <map>
                  <entry key="tag_name" value=" The github tag used to download the release" />
                </map>
              </option>
            </GitHubAction>
          </value>
        </entry>
      </map>
    </option>
  </component>
</application>