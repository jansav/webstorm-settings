<templateSet group="Houston">
  <template name="fun" value="() =&gt; {$END$}" description="Function as lambda" toReformat="false" toShortenFQNames="false">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ctor" value="constructor() {&#10;  $END$&#10;}" description="Constructor" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="it" value="it('$NAME$', () =&gt; {&#10;  $END$&#10;});" description="Chai it" toReformat="false" toShortenFQNames="false">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="bef" value="beforeEach(() =&gt; {&#10;  $END$&#10;});" description="Mocha before each" toReformat="false" toShortenFQNames="false">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="des" value="describe('$NAME$', () =&gt; {&#10;  $END$&#10;});" description="Mocha describe" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="firstWord(spaceSeparated(fileNameWithoutExtension()))" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="req" value="require('./$FILE$')$DEFAULT$" description="Require module in same folder" toReformat="false" toShortenFQNames="true">
    <variable name="FILE" expression="regularExpression(fileNameWithoutExtension(), &quot;\.test&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="DEFAULT" expression="" defaultValue="&quot;.default&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="dess" value="describe('$NAME$', () =&gt; {&#10;    $END$&#10;    $SELECTION$&#10;});" description="Surround template for mocha describe" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="firstWord(spaceSeparated(fileNameWithoutExtension()))" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="log" value="console.log(JSON.stringify($EXIT$, null, 2));" description="Pretty printed JSON log" toReformat="true" toShortenFQNames="true">
    <variable name="EXIT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="danger" value="dangerouslySetInnerHTML={{__html: this.props.formatMessage('$END$')}}" description="React: dangerouslySetInnerHTML" toReformat="false" toShortenFQNames="false">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="imp" value="import $FILE$$END$ from './$FILE$';" description="Import module in same folder" toReformat="false" toShortenFQNames="false">
    <variable name="FILE" expression="regularExpression(fileNameWithoutExtension(), &quot;\.test&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="impreact" value="import React from 'react';" description="Import react" toReformat="false" toShortenFQNames="false">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="beflet" value="let $VARIABLE$;&#10;&#10;beforeEach(() =&gt; {&#10;  $VARIABLE$ = $END$&#10;});&#10;&#10;" description="Mocha before each with variable initialization" toReformat="false" toShortenFQNames="false">
    <variable name="VARIABLE" expression="camelCase(fileNameWithoutExtension())" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="prop" value="$PROP_NAME$={ $PROP_NAME$$POSTFIX$ }$END$" description="React prop" toReformat="false" toShortenFQNames="false">
    <variable name="PROP_NAME" expression="" defaultValue="&quot;prop&quot;" alwaysStopAt="true" />
    <variable name="POSTFIX" expression="enum(&quot;&quot;,&quot;Mock&quot;,&quot;Stub&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="toh" value="toHaveBeenCalled$With$($END$)" description="ToHaveBeenCalledWith" toReformat="false" toShortenFQNames="false">
    <variable name="With" expression="" defaultValue="&quot;With&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="deswithin" value="describe('a$MAYBE_N$ $VARIABLE_IN_UPPERCASE$ to $PURPOSE_IN_UPPERCASE$ within', () =&gt; {&#10;  let $VARIABLE$;&#10;    &#10;  beforeEach(() =&gt; {&#10;    $VARIABLE$ = component.find('$VARIABLE_IN_UPPERCASE$[data-$PURPOSE$-test]');&#10;  });&#10;    &#10;  it('knows how to $PURPOSE_IN_UPPERCASE$', () =&gt; {&#10;    expect($VARIABLE$).toHaveProp('$PROP$', $PURPOSE_IN_CAMELCASE$Stub);&#10;  });&#10;});" description="A decribe for a component within" toReformat="false" toShortenFQNames="false">
    <variable name="VARIABLE" expression="" defaultValue="&quot;componentName&quot;" alwaysStopAt="true" />
    <variable name="VARIABLE_IN_UPPERCASE" expression="capitalize(VARIABLE)" defaultValue="" alwaysStopAt="false" />
    <variable name="PURPOSE" expression="" defaultValue="&quot;some-purpose&quot;" alwaysStopAt="true" />
    <variable name="PURPOSE_IN_UPPERCASE" expression="spaceSeparated(PURPOSE)" defaultValue="" alwaysStopAt="false" />
    <variable name="PURPOSE_IN_CAMELCASE" expression="camelCase(PURPOSE)" defaultValue="" alwaysStopAt="true" />
    <variable name="MAYBE_N" expression="" defaultValue="&quot;n&quot;" alwaysStopAt="true" />
    <variable name="PROP" expression="" defaultValue="&quot;onClick&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fn" value="jest.fn()" description="Jest mock function" toReformat="false" toShortenFQNames="false">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="jestRequire" value="const $FILE$$END$ = require('./$FILE$').default;" description="Require instead of import so that &quot;jestRewire&quot; works" toReformat="false" toShortenFQNames="false">
    <variable name="FILE" expression="firstWord(spaceSeparated(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="com" value="import React from 'react';&#10;&#10;export const $FILE$ = () =&gt; $DIV$$END$;" description="React stateless functional component" toReformat="false" toShortenFQNames="false">
    <variable name="FILE" expression="capitalize(camelCase(regularExpression(fileNameWithoutExtension(), &quot;\.test&quot;, &quot;&quot;)))" defaultValue="" alwaysStopAt="false" />
    <variable name="DIV" expression="" defaultValue="&quot;&lt;div /&gt;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="impStyles" value="import styles from './$FILE$.module.scss';" description="Import CSS-module for current file" toReformat="false" toShortenFQNames="true">
    <variable name="FILE" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="test" value="import $FILE_IN_CAMELCASE$ from './$FILE$';&#10;&#10;describe('$FILE$', () =&gt; {&#10;  $END$&#10;});&#10;" description="Test for module" toReformat="false" toShortenFQNames="false">
    <variable name="FILE_IN_CAMELCASE" expression="camelCase(FILE)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE" expression="regularExpression(fileNameWithoutExtension(), &quot;\.test&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="snap" value="expect($WHAT$.baseElement).toMatchSnapshot();$END$" description="Expect to match snapshot" toReformat="false" toShortenFQNames="true">
    <variable name="WHAT" expression="enum(&quot;rendered&quot;, &quot;appFake.getRendered()&quot;)" defaultValue="&quot;rendered&quot;" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fv" value="{() =&gt; (&#10;  $SELECTION$&#10;)}" description="Wrap children with function" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="implod" value="import { $FUNCTION$ } from 'lodash/fp';$END$" description="Import lodash fp stuff" toReformat="false" toShortenFQNames="false">
    <variable name="FUNCTION" expression="" defaultValue="&quot;map&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="impmobx" value="import { action, IComputedValue, computed, observable, runInAction, trace, autorun, observe, onBecomeObserved, onBecomeUnobserved, flow as mobxFlow } from 'mobx';&#10;import { observer } from 'mobx-react';" description="Common MobX imports" toReformat="false" toShortenFQNames="false">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="sprop" value="$PROPERTY_NAME$: 'some-$PROPERTY_NAME_AS_STRING$',$END$" description="Stubbed property" toReformat="false" toShortenFQNames="false">
    <variable name="PROPERTY_NAME" expression="" defaultValue="&quot;propertyName&quot;" alwaysStopAt="true" />
    <variable name="PROPERTY_NAME_AS_STRING" expression="lowercaseAndDash(PROPERTY_NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="pre" value="&lt;pre&gt;{JSON.stringify($TO_BE_DEBUGGED$, null, 2)}&lt;/pre&gt;" description="Pre-element for pretty-printed debugging" toReformat="false" toShortenFQNames="false">
    <variable name="TO_BE_DEBUGGED" expression="" defaultValue="&quot;model&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="exp" value="expect($MODEL$).to$BE_OR_EQUAL$($END$);" description="Expect to match snapshot" toReformat="false" toShortenFQNames="true">
    <variable name="MODEL" expression="" defaultValue="&quot;model&quot;" alwaysStopAt="true" />
    <variable name="BE_OR_EQUAL" expression="enum(&quot;Be&quot;, &quot;Equal&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="knows" value="it('$KNOWS$ $PROP$', () =&gt; {&#10;  let $PROP$Stub;&#10;  &#10;  $PROP$Stub = $STUB_VALUE$;&#10;  &#10;  expect($INPUT$).toHaveProp('$EVENT$', $PROP$Stub);&#10;});&#10;" description="A deswithin knows" toReformat="false" toShortenFQNames="false">
    <variable name="KNOWS" expression="enum(&quot;knows&quot;,&quot;knows how to&quot;, &quot;knows when to&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="PROP" expression="" defaultValue="&quot;prop&quot;" alwaysStopAt="true" />
    <variable name="STUB_VALUE" expression="enum(&quot;{}&quot;, &quot;() =&gt; {}&quot;, &quot;'some-string'&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="INPUT" expression="" defaultValue="&quot;input&quot;" alwaysStopAt="true" />
    <variable name="EVENT" expression="enum(PROP,&quot;onClick&quot;,&quot;onSubmit&quot;, &quot;onChange&quot;,&quot;disabled&quot;, &quot;enabled&quot;, &quot;onKeypress&quot;, &quot;onFocus&quot;, &quot;onBlur&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="con" value="expect.configured($CONFIGURED$, $PARAMETERS$)" description="Asymmetric matcher for a configured function" toReformat="false" toShortenFQNames="false">
    <variable name="CONFIGURED" expression="" defaultValue="&quot;withModel&quot;" alwaysStopAt="true" />
    <variable name="PARAMETERS" expression="" defaultValue="&quot;[]&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="self" value="$NAME$ = $NAME$$END$" description="Set to self" toReformat="false" toShortenFQNames="false">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="file" value="$FILE$$END$" description="Name of current file" toReformat="false" toShortenFQNames="true">
    <variable name="FILE" expression="regularExpression(fileNameWithoutExtension(), &quot;\.test&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="depr" value="/** &#10; * @deprecated $END$&#10; */" description="Deprecated" toReformat="false" toShortenFQNames="false">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="beht" value="import type { DiContainer } from &quot;@lensapp/injectable&quot;;&#10;import type { RenderResult } from &quot;@testing-library/react&quot;;&#10;&#10;describe('$FILE$', () =&gt; {&#10;  let builder: Application$END$Builder;&#10;  let mainDi: DiContainer;&#10;  let rendererDi: DiContainer;&#10;  let rendered: RenderResult;&#10;&#10;  beforeEach(async () =&gt; {&#10;    builder = getApplicationBuilder();&#10;&#10;    await builder.render();&#10;    &#10;    mainDi = builder.mainDi;&#10;    rendererDi = builder.applicationWindow.only.di;&#10;    rendered = builder.applicationWindow.only.rendered;&#10;  });&#10;&#10;  describe(&quot;when navigating to $ROUTE$&quot;, () =&gt; {&#10;    beforeEach(async () =&gt; {&#10;      await rendererDi.inject(navigateTo$ROUTE_IN_UPPERCASE$)();&#10;    });&#10;&#10;    it(&quot;renders&quot;, () =&gt; {&#10;      expect(rendered.baseElement).toMatchSnapshot();&#10;    });&#10;  });&#10;});&#10;" description="Behavioural test" toReformat="false" toShortenFQNames="false">
    <variable name="FILE" expression="regularExpression(fileNameWithoutExtension(), &quot;\.test&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="ROUTE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ROUTE_IN_UPPERCASE" expression="capitalize(camelCase(ROUTE))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tfn" value="let $MOCK$Mock: jest.Mock;&#10;$MOCK$Mock = jest.fn();&#10;" description="Jest fn for TypeScript" toReformat="false" toShortenFQNames="false">
    <variable name="MOCK" expression="" defaultValue="&quot;someFunction&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="spr" value="...($SELECTION$ ? { $SELECTION$ } : {})" description="Spread ternary" toReformat="false" toShortenFQNames="false">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fe" value="import { autoRegister } from &quot;@lensapp/injectable-extension-for-auto-registration&quot;;&#10;import type { Feature } from &quot;@lensapp/feature-core&quot;;&#10;&#10;export const feature: Feature = {&#10;  id: &quot;$FEATURE_ID$&quot;,&#10;&#10;  register: (di) =&gt; {&#10;    autoRegister({&#10;      di,&#10;      targetModule: module,&#10;&#10;      getRequireContexts: () =&gt; [&#10;        require.context(&quot;./&quot;, true, /\.injectable\.(ts|tsx)$/),&#10;      ],&#10;    });&#10;  },&#10;};&#10;" description="Feature" toReformat="false" toShortenFQNames="false">
    <variable name="FEATURE_ID" expression="regularExpression(regularExpression(fileRelativePath(), &quot;/src/.*&quot;, &quot;&quot;), &quot;.*/&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="testf" value="import { createContainer, DiContainer } from &quot;@lensapp/injectable&quot;;&#10;import { registerFeature } from &quot;@lensapp/feature-core&quot;;&#10;import { runAllTestUtilityRunnables } from &quot;@lensapp/test-utils-for-production&quot;;&#10;&#10;describe(&quot;$FILE_IN_KEBABCASE$&quot;, () =&gt; {&#10;  let di: DiContainer;&#10;&#10;  beforeEach(() =&gt; {&#10;    di = createContainer(&quot;irrelevant&quot;);&#10;&#10;    registerFeature(di, $END$feature);&#10;    &#10;    di.preventSideEffects();&#10;&#10;    runAllTestUtilityRunnables(di);&#10;  });&#10;&#10;  it(&quot;$TEST_NAME$&quot;, () =&gt; {});&#10;});&#10;" description="Test for Feature" toReformat="false" toShortenFQNames="false">
    <variable name="FILE_IN_KEBABCASE" expression="lowercaseAndDash(regularExpression(fileName(), &quot;\.test\..*&quot;, &quot;&quot;))" defaultValue="" alwaysStopAt="true" />
    <variable name="TEST_NAME" expression="" defaultValue="&quot;some test name&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ex" value="expect($ACTUAL$).$EXPECTED$($ARGUMENTS$);" description="Jest expect" toReformat="false" toShortenFQNames="false">
    <variable name="ACTUAL" expression="" defaultValue="&quot;actual&quot;" alwaysStopAt="true" />
    <variable name="EXPECTED" expression="enum(&quot;toEqual&quot;, &quot;toHaveBeenCalledWith&quot;, &quot;toHaveBeenCalledWith&quot;, &quot;not.toHaveBeenCalled&quot;, &quot;toBe&quot;, &quot;toThrow&quot;, &quot;toBeUndefined&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="ARGUMENTS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ksing" value="type Param = string;&#10;lifecycle: lifecycleEnum.keyedSingleton({&#10;  getInstanceKey: (di, param: Param) =&gt; id,&#10;})" description="Injectable keyed singleton" toReformat="false" toShortenFQNames="false">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="mco" value="let $VARIABLE$Mock: AsyncFnMock&lt;$VARIABLE_IN_UPPERCASE$&gt;;&#10;$VARIABLE$Mock = asyncFn();&#10;di.override($VARIABLE$Injectable, () =&gt; $VARIABLE$Mock);$END$&#10;" description="Mock and override" toReformat="false" toShortenFQNames="false">
    <variable name="VARIABLE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VARIABLE_IN_UPPERCASE" expression="capitalize(VARIABLE)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tryc" value="try {&#10;  $SELECTION$&#10;} catch(e: any) {&#10;  $END$&#10;}" description="Try/catch" toReformat="true" toShortenFQNames="false">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="taplog" value="$VARIABLE_NAME$ =&gt; { console.log(&quot;$BOOKMARK$&quot;, $VARIABLE_NAME$); return $VARIABLE_NAME$; }," description="Tapped console.log for pipeline" toReformat="false" toShortenFQNames="false">
    <variable name="VARIABLE_NAME" expression="jsSuggestVariableName()" defaultValue="" alwaysStopAt="false" />
    <variable name="BOOKMARK" expression="enum(lowercaseAndDash(regularExpression(fileName(), &quot;\\..*&quot;, &quot;&quot;)), jsMethodName(), user())" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="impdisco" value="import type { Discover, Discovered, MaybeDiscovered } from &quot;@lensapp/react-testing-library-discovery&quot;;&#10;import { discoverFor } from &quot;@lensapp/react-testing-library-discovery&quot;;&#10;" description="Discoverable" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cdi" value="let di: DiContainer;&#10;di = createContainer(&quot;$CONTAINER_NAME$&quot;);" description="Create injectable container" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="CONTAINER_NAME" expression="enum(&quot;some-container&quot;, &quot;irrelevant&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>