<templateSet group="Janne">
  <template name="resnot" value="it('does not resolve yet', () =&gt; {&#10;  return expect($actualPromise$).not.toHaveResolved();&#10;});" description="Does not resolve yet" toReformat="false" toShortenFQNames="true">
    <variable name="actualPromise" expression="" defaultValue="&quot;actualPromise&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="impmom" value="import moment from 'moment-timezone';" description="Import moment" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="inj" value="import { getInjectable } from &quot;@lensapp/injectable&quot;;&#10;&#10;export const $FILE_WITHOUT_INJECTABLE$Injectable = getInjectable({&#10;  id: &quot;$FILE_WITHOUT_INJECTABLE_IN_KEBABCASE$&quot;,&#10;  instantiate: (di) =&gt; $END$,&#10;});" description="New injectable file" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_WITHOUT_INJECTABLE" expression="camelCase(regularExpression(fileNameWithoutExtension, &quot;\.(injectable|test)&quot;, &quot;&quot;))" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_WITHOUT_INJECTABLE_IN_KEBABCASE" expression="lowercaseAndDash(FILE_WITHOUT_INJECTABLE)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="impasyncfn" value="import type { AsyncFnMock } from &quot;@async-fn/jest&quot;;&#10;import asyncFn from &quot;@async-fn/jest&quot;;" description="Import asyncFn" toReformat="false" toShortenFQNames="false">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="mik" value="Co-authored-by: Mikko Aspiala &lt;mikko.aspiala@gmail.com&gt;" description="Co authored by Mikko" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="HTTP_CLIENT_ENVIRONMENT" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JADE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="OTHER" value="true" />
      <option name="REQUEST" value="false" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="TypeScript" value="false" />
      <option name="Vue" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="win" value="getInjectableComponent({&#10;  id: &quot;$ID$&quot;,&#10;&#10;  Component: $SELECTION$&#10;});&#10;&#10;import { getInjectableComponent } from &quot;@lensapp/injectable-react&quot;;&#10;" description="Make a component injectable component" toReformat="false" toShortenFQNames="true" useStaticImport="true">
    <variable name="ID" expression="jsSuggestVariableName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="din" value="$NAME$: di.inject($NAME$I$END$njectable)," description="DI inject" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="&quot;something&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="dep" value="interface Dependencies {&#10;  $END$&#10;}" description="Interface for Dependencies" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="jan" value="Co-authored-by: Janne Savolainen &lt;janne.savolainen@live.fi&gt;" description="Co authored by Janne" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="HTTP_CLIENT_ENVIRONMENT" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JADE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="OTHER" value="true" />
      <option name="REQUEST" value="false" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="TypeScript" value="false" />
      <option name="Vue" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="cdin" value="const $NAME$ = di.inject($INJECTABLE_NAME$);" description="constant for injected" toReformat="false" toShortenFQNames="true" useStaticImport="true">
    <variable name="INJECTABLE_NAME" expression="jsSuggestImportedEntityName()" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="regularExpression(INJECTABLE_NAME, &quot;(Injectable|InjectionToken)&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="runa" value="runInAction(() =&gt; { &#10;  $SELECTION$ &#10;});" description="Wrap with MobX runInAction" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="injt" value="import { getInjectable, getInjectionToken } from &quot;@lensapp/injectable&quot;;&#10;&#10;export type $TYPE$ = {};&#10;&#10;export const $FILE_IN_CAMELCASE$InjectionToken = getInjectionToken&lt;$TYPE$&gt;({&#10;  id: &quot;$FILE_WITHOUT_INJECTABLE$&quot;,&#10;});&#10;&#10;export const $FILE$ = getInjectable({&#10;  id: &quot;$FILE_WITHOUT_INJECTABLE$&quot;,&#10;  instantiate: (di): $TYPE$ =&gt; ({$END$}),&#10;  injectionToken: $FILE_IN_CAMELCASE$InjectionToken&#10;});" description="New injectable file with injection token" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_WITHOUT_INJECTABLE" expression="regularExpression(fileNameWithoutExtension, &quot;.injectable&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE" expression="camelCase(FILE_WITHOUT_INJECTABLE)Injectable" defaultValue="" alwaysStopAt="false" />
    <variable name="TYPE" expression="capitalize(FILE_IN_CAMELCASE)" defaultValue="" alwaysStopAt="false" />
    <variable name="FILE_IN_CAMELCASE" expression="camelCase(FILE_WITHOUT_INJECTABLE)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tok" value="import { getInjectionToken } from &quot;@lensapp/injectable&quot;;&#10;&#10;export type $TYPE$ = {};&#10;&#10;export const $FILE_IN_CAMELCASE$InjectionToken = getInjectionToken&lt;$TYPE$&gt;({&#10;  id: &quot;$FILE_WITHOUT_INJECTABLE$&quot;,&#10;});&#10;" description="New injection token" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_WITHOUT_INJECTABLE" expression="regularExpression(fileNameWithoutExtension, &quot;.injectable&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_IN_CAMELCASE" expression="camelCase(FILE_WITHOUT_INJECTABLE)" defaultValue="" alwaysStopAt="false" />
    <variable name="TYPE" expression="capitalize(FILE_IN_CAMELCASE)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="injc" value="const $INJECTABLE_NAME$Injectable = getInjectable({&#10;  id: &quot;$INJECTABLE_NAME_IN_KEBABCASE$&quot;,&#10;  instantiate: (di) =&gt; $END$,&#10;});&#10;" description="New injectable as constant" toReformat="false" toShortenFQNames="true">
    <variable name="INJECTABLE_NAME" expression="" defaultValue="&quot;some&quot;" alwaysStopAt="true" />
    <variable name="INJECTABLE_NAME_IN_KEBABCASE" expression="lowercaseAndDash(INJECTABLE_NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="injty" value="import { getInjectable } from &quot;@lensapp/injectable&quot;;&#10;&#10;export type $TYPE$ = {};&#10;&#10;export const $FILE$ = getInjectable({&#10;  id: &quot;$FILE_WITHOUT_INJECTABLE$&quot;,&#10;  instantiate: (di): $TYPE$ =&gt; ({$END$}),&#10;});" description="New injectable file with type" toReformat="false" toShortenFQNames="true">
    <variable name="TYPE" expression="capitalize(camelCase(FILE_WITHOUT_INJECTABLE))" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE" expression="camelCase(fileNameWithoutExtension)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_WITHOUT_INJECTABLE" expression="regularExpression(fileNameWithoutExtension, &quot;.injectable&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ccdin" value="const $NAME$ = di.inject($INJECTABLE_NAME$);" description="Constant for injected but better" toReformat="false" toShortenFQNames="true" useStaticImport="true">
    <variable name="INJECTABLE_NAME" expression="jsSuggestImportedEntityName()" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="regularExpression(INJECTABLE_NAME, &quot;(Injectable|InjectionToken)&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tokc" value="const $FILE_IN_CAMELCASE$InjectionToken = getInjectionToken&lt;$TYPE$&gt;({&#10;  id: &quot;$FILE_WITHOUT_INJECTABLE$-injection-token&quot;,&#10;});&#10;" description="New injection token as constant" toReformat="false" toShortenFQNames="true">
    <variable name="TYPE" expression="capitalize(FILE_IN_CAMELCASE)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_IN_CAMELCASE" expression="camelCase(FILE_WITHOUT_INJECTABLE)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_WITHOUT_INJECTABLE" expression="regularExpression(fileNameWithoutExtension, &quot;.injectable&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="act" value="await act(async () =&gt; { &#10;  $SELECTION$ &#10;});" description="Wrap with act" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="renderProp" value="&lt;$ASD$&gt;&#10;  {() =&gt; (&#10;    $SELECTION$&#10;  )}&#10;&lt;/$ASD$&gt;&#10;" description="Wrap with render prop" toReformat="false" toShortenFQNames="true">
    <variable name="ASD" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="wrapinjc" value="export const $COMPONENT_NAME$ = getInjectableComponent({&#10;  id: &quot;$INJECTABLE_ID$&quot;,&#10;&#10;  Component: $ASD$&#10;});&#10;" description="Wrap with injectable component" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT_NAME" expression="capitalize(camelCase(regularExpression(fileNameWithoutExtension, &quot;.injectable&quot;, &quot;&quot;)))" defaultValue="" alwaysStopAt="true" />
    <variable name="INJECTABLE_ID" expression="lowercaseAndDash(COMPONENT_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="ASD" expression="egularExpression(SELECTION, &quot;/[']/&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="usei" value="const $NAME$ = useInject($INJECTABLE_NAME$);" description="useInject" toReformat="false" toShortenFQNames="true" useStaticImport="true">
    <variable name="INJECTABLE_NAME" expression="jsSuggestImportedEntityName()" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="regularExpression(INJECTABLE_NAME, &quot;(Injectable|InjectionToken)&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>