<templateSet group="Janne">
  <template name="resnot" value="it('does not resolve yet', async () =&gt; {&#10;  const promiseStatus = await getPromiseStatus($actualPromise$);&#10;  &#10;  expect(promiseStatus.fulfilled).toBe(false);&#10;});" description="Does not resolve yet" toReformat="false" toShortenFQNames="true">
    <variable name="actualPromise" expression="" defaultValue="&quot;actualPromise&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="impmom" value="import moment from 'moment-timezone';" description="Import moment" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="testaction" value="import itHasDependencies from 'shared-between-everything/src/test-utils/itHasDependencies';&#10;import getRepository from 'shared-between-lambdas/src/getRepository/getRepository';&#10;import itIsBusinessAction from 'shared-between-lambdas/src/test-utils/itIsBusinessAction';&#10;import jsonSchemaValidator from 'shared-between-lambdas/src/validators/jsonSchemaValidator/jsonSchemaValidator';&#10;import * as handler from './$ACTION_NAME$.$ACTION_TYPE$-handler';&#10;import $ACTION_TYPE$Configuration from './$ACTION_TYPE$-configuration.json';&#10;&#10;import {&#10;  handle as $ACTION_NAME$,&#10;  dependencies,&#10;} from './$ACTION_NAME$.$ACTION_TYPE$-handler';&#10;&#10;describe('$ACTION_NAME$.$ACTION_TYPE$-handler', () =&gt; {&#10;  itIsBusinessAction({&#10;    handler,&#10;    validators: [&#10;      expect.configured(jsonSchemaValidator, [$ACTION_TYPE$Configuration.schema]),&#10;    ],&#10;    configuration: $ACTION_TYPE$Configuration,&#10;  });&#10;  &#10;  itHasDependencies({&#10;    requireFunctionWithDependencies: require('./$ACTION_NAME$.$ACTION_TYPE$-handler'),&#10;    expectedDependencies: [&#10;      {&#10;        name: '$DEPENDENCY_NAME$',&#10;        getDependency: () =&gt; $DEPENDENCY_NAME$&#10;      }&#10;    ]&#10;  });&#10;&#10;&#10;  describe('given stubbed dependencies', () =&gt; {&#10;    beforeEach(() =&gt; {&#10;      dependencies.$DEPENDENCY_NAME$ = $DEPENDENCY_STUB$ &#10;    });&#10;&#10;    describe('when called', () =&gt; {&#10;      let actualPromise;&#10;      &#10;      beforeEach(() =&gt; {&#10;        actualPromise = $ACTION_NAME$($END$);&#10;      });&#10;    });&#10;  });&#10;});&#10;" description="Test business action" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION_NAME" expression="regularExpression(fileNameWithoutExtension(), &quot;\.(command|query)-handler.test&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION_TYPE" expression="enum(&quot;command&quot;, &quot;query&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="DEPENDENCY_NAME" expression="" defaultValue="&quot;getRepository&quot;" alwaysStopAt="true" />
    <variable name="DEPENDENCY_STUB" expression="" defaultValue="&quot;repositoryName =&gt; ({}[repositoryName])&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="busact" value="import getRepository from 'shared-between-lambdas/src/getRepository/getRepository';&#10;import jsonSchemaValidator from 'shared-between-lambdas/src/validators/jsonSchemaValidator/jsonSchemaValidator';&#10;import configuration from './$ACTION_TYPE$-configuration.json';&#10;&#10;const validators = [&#10;  jsonSchemaValidator(configuration.schema),&#10;];&#10;&#10;const dependencies = {&#10;  $DEPENDENCY_NAME$&#10;};&#10;&#10;const handle = ($END$) =&gt; {};&#10;&#10;export { configuration, validators, handle, dependencies };&#10;" description="New business action" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION_TYPE" expression="enum(&quot;command&quot;, &quot;query&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="DEPENDENCY_NAME" expression="" defaultValue="&quot;getRepository&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="intact" value="import configuration from './$ACTION_TYPE$-configuration.json';&#10;&#10;it('test', async () =&gt; {&#10;  const result = await call$ACTION_TYPE_IN_UPPER_FIRST$({&#10;    actionName: configuration.name,&#10;    actionParameters: {&#10;      $END$&#10;    }&#10;  });&#10;&#10;  console.log(result);&#10;});&#10;" description="Integration test for business action" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION_TYPE" expression="enum(&quot;command&quot;,&quot;query&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION_TYPE_IN_UPPER_FIRST" expression="capitalize(ACTION_TYPE)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="testdep" value="itHasDependencies({&#10;  requireFunctionWithDependencies: require('./$FILE$'),&#10;  expectedDependencies: [&#10;    {&#10;      name: '$DEPENDENCY$',&#10;      getDependency: () =&gt; $DEPENDENCY$$END$&#10;    }&#10;  ]&#10;});&#10;" description="ItHasExportedDependencies test" toReformat="false" toShortenFQNames="false">
    <variable name="FILE" expression="regularExpression(fileNameWithoutExtension(), &quot;\.test&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="DEPENDENCY" expression="" defaultValue="&quot;dependency&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="inj" value="import { getInjectable } from &quot;@lensapp/injectable&quot;;&#10;&#10;export const $FILE_WITHOUT_INJECTABLE$Injectable = getInjectable({&#10;  id: &quot;$FILE_WITHOUT_INJECTABLE_IN_KEBABCASE$&quot;,&#10;  instantiate: (di) =&gt; $END$,&#10;});" description="New injectable file" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_WITHOUT_INJECTABLE" expression="camelCase(regularExpression(fileNameWithoutExtension, &quot;\.(injectable|test)&quot;, &quot;&quot;))" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_WITHOUT_INJECTABLE_IN_KEBABCASE" expression="lowercaseAndDash(FILE_WITHOUT_INJECTABLE)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="impfu" value="import { $END$ } from 'shared-between-everything/src/functionalProgramming';" description="Import function from functional programming" toReformat="false" toShortenFQNames="false">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="impasyncfn" value="import type { AsyncFnMock } from &quot;@async-fn/jest&quot;;&#10;import asyncFn from &quot;@async-fn/jest&quot;;" description="Import asyncFn" toReformat="false" toShortenFQNames="false">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="mik" value="Co-authored-by: Mikko Aspiala &lt;mikko.aspiala@gmail.com&gt;" description="Co authored by Mikko" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="HTTP_CLIENT_ENVIRONMENT" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JADE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="OTHER" value="true" />
      <option name="REQUEST" value="false" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="TypeScript" value="false" />
      <option name="Vue" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="win" value="export const $COMPONENT_NAME$ = getInjectableComponent({&#10;  id: &quot;$INJECTABLE_ID$&quot;,&#10;&#10;  Component: $END$&#10;});&#10;" description="" toReformat="false" toShortenFQNames="true" useStaticImport="true">
    <variable name="COMPONENT_NAME" expression="capitalize(camelCase(regularExpression(fileNameWithoutExtension, &quot;.injectable&quot;, &quot;&quot;)))" defaultValue="" alwaysStopAt="true" />
    <variable name="INJECTABLE_ID" expression="lowercaseAndDash(COMPONENT_NAME)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="din" value="$NAME$: di.inject($NAME$I$END$njectable)," description="DI inject" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="&quot;something&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="dep" value="interface Dependencies {&#10;  $END$&#10;}" description="Interface for Dependencies" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="jan" value="Co-authored-by: Janne Savolainen &lt;janne.savolainen@live.fi&gt;" description="Co authored by Janne" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="HTTP_CLIENT_ENVIRONMENT" value="false" />
      <option name="Handlebars" value="false" />
      <option name="JADE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="OTHER" value="true" />
      <option name="REQUEST" value="false" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="TypeScript" value="false" />
      <option name="Vue" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="cdin" value="const $NAME$ = di.inject($NAME$I$END$njectable);" description="constant for injected" toReformat="false" toShortenFQNames="true" useStaticImport="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="incomprop" value="import React from 'react';&#10;import { withInjectables } from '@lensapp/injectable-react';&#10;&#10;interface Dependencies {&#10;  $DEPENDENCY$: $DEPENDENCY_TYPE$&#10;}&#10;&#10;interface $FILE$Props {&#10;&#10;}&#10;&#10;const NonInjected$FILE$ = ({ $DEPENDENCY$ }: $FILE$Props &amp; Dependencies) =&gt; (&#10;  &lt;div&gt;&#10;    $END$&#10;  &lt;/div&gt;&#10;);&#10;&#10;export const $FILE$ = withInjectables&lt;Dependencies, $FILE$Props&gt;(&#10;  NonInjected$FILE$,&#10;&#10;  {&#10;    getProps: (di, props) =&gt; ({&#10;      $DEPENDENCY$: di.inject($DEPENDENCY$Injectable),&#10;      ...props,&#10;    }),&#10;  },&#10;);&#10;" description="React component with injectables and props" toReformat="false" toShortenFQNames="true">
    <variable name="FILE" expression="capitalize(camelCase(fileNameWithoutExtension))" defaultValue="" alwaysStopAt="false" />
    <variable name="DEPENDENCY" expression="" defaultValue="&quot;someDependency&quot;" alwaysStopAt="true" />
    <variable name="DEPENDENCY_TYPE" expression="capitalize(DEPENDENCY)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="incom" value="import React from 'react';&#10;import { withInjectables } from '@lensapp/injectable-react';&#10;&#10;interface Dependencies {&#10;  $DEPENDENCY$: $DEPENDENCY_TYPE$&#10;}&#10;&#10;const NonInjected$FILE$ = ({ $DEPENDENCY$ }: Dependencies) =&gt; (&#10;  &lt;div&gt;&#10;    $END$&#10;  &lt;/div&gt;&#10;);&#10;&#10;export const $FILE$ = withInjectables&lt;Dependencies&gt;(&#10;  NonInjected$FILE$,&#10;&#10;  {&#10;    getProps: (di) =&gt; ({&#10;      $DEPENDENCY$: di.inject($DEPENDENCY$Injectable),&#10;    }),&#10;  },&#10;);&#10;" description="React component with injectables and no props" toReformat="false" toShortenFQNames="true">
    <variable name="FILE" expression="capitalize(camelCase(fileNameWithoutExtension))" defaultValue="" alwaysStopAt="false" />
    <variable name="DEPENDENCY" expression="" defaultValue="&quot;someDependency&quot;" alwaysStopAt="true" />
    <variable name="DEPENDENCY_TYPE" expression="capitalize(DEPENDENCY)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="lol" value="jannelol($ACTION_NAME$, () =&gt; { &#10;  $RETURN$$SELECTION$ &#10;});" description="Performance lol" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="RETURN" expression="" defaultValue="&quot;return &quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="runa" value="runInAction(() =&gt; { &#10;  $SELECTION$ &#10;});" description="Wrap with MobX runInAction" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="lolf" value="jannelolFor($ACTION_NAME$, $SELECTION$)" description="Performance lol decorator" toReformat="false" toShortenFQNames="true">
    <variable name="ACTION_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="injt" value="import { getInjectable, getInjectionToken } from &quot;@lensapp/injectable&quot;;&#10;&#10;export type $TYPE$ = {};&#10;&#10;export const $FILE_IN_CAMELCASE$InjectionToken = getInjectionToken&lt;$TYPE$&gt;({&#10;  id: &quot;$FILE_WITHOUT_INJECTABLE$-injection-token&quot;,&#10;});&#10;&#10;export const $FILE$ = getInjectable({&#10;  id: &quot;$FILE_WITHOUT_INJECTABLE$&quot;,&#10;  instantiate: (di): $TYPE$ =&gt; ({$END$}),&#10;  injectionToken: $FILE_IN_CAMELCASE$InjectionToken&#10;});" description="New injectable file with injection token" toReformat="false" toShortenFQNames="true">
    <variable name="TYPE" expression="capitalize(FILE_IN_CAMELCASE)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_IN_CAMELCASE" expression="camelCase(FILE_WITHOUT_INJECTABLE)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE" expression="camelCase(fileNameWithoutExtension)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_WITHOUT_INJECTABLE" expression="regularExpression(fileNameWithoutExtension, &quot;.injectable&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tok" value="import { getInjectionToken } from &quot;@lensapp/injectable&quot;;&#10;&#10;export type $TYPE$ = {};&#10;&#10;export const $FILE_IN_CAMELCASE$InjectionToken = getInjectionToken&lt;$TYPE$&gt;({&#10;  id: &quot;$FILE_WITHOUT_INJECTABLE$-injection-token&quot;,&#10;});&#10;" description="New injection token" toReformat="false" toShortenFQNames="true">
    <variable name="TYPE" expression="capitalize(FILE_IN_CAMELCASE)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_IN_CAMELCASE" expression="camelCase(FILE_WITHOUT_INJECTABLE)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_WITHOUT_INJECTABLE" expression="regularExpression(fileNameWithoutExtension, &quot;.injectable&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="injc" value="const $INJECTABLE_NAME$Injectable = getInjectable({&#10;  id: &quot;$INJECTABLE_NAME_IN_KEBABCASE$&quot;,&#10;  instantiate: (di) =&gt; $END$,&#10;});&#10;" description="New injectable as constant" toReformat="false" toShortenFQNames="true">
    <variable name="INJECTABLE_NAME" expression="" defaultValue="&quot;some&quot;" alwaysStopAt="true" />
    <variable name="INJECTABLE_NAME_IN_KEBABCASE" expression="lowercaseAndDash(INJECTABLE_NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="injty" value="import { getInjectable } from &quot;@lensapp/injectable&quot;;&#10;&#10;export type $TYPE$ = {};&#10;&#10;export const $FILE$ = getInjectable({&#10;  id: &quot;$FILE_WITHOUT_INJECTABLE$&quot;,&#10;  instantiate: (di): $TYPE$ =&gt; ({$END$}),&#10;});" description="New injectable file with type" toReformat="false" toShortenFQNames="true">
    <variable name="TYPE" expression="capitalize(camelCase(FILE_WITHOUT_INJECTABLE))" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE" expression="camelCase(fileNameWithoutExtension)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_WITHOUT_INJECTABLE" expression="regularExpression(fileNameWithoutExtension, &quot;.injectable&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ccdin" value="const $NAME$ = di.inject($INJECTABLE_NAME$);" description="Constant for injected but better" toReformat="false" toShortenFQNames="true" useStaticImport="true">
    <variable name="INJECTABLE_NAME" expression="jsSuggestImportedEntityName()" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="regularExpression(INJECTABLE_NAME, &quot;(Injectable|InjectionToken)&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tokc" value="const $FILE_IN_CAMELCASE$InjectionToken = getInjectionToken&lt;$TYPE$&gt;({&#10;  id: &quot;$FILE_WITHOUT_INJECTABLE$-injection-token&quot;,&#10;});&#10;" description="New injection token as constant" toReformat="false" toShortenFQNames="true">
    <variable name="TYPE" expression="capitalize(FILE_IN_CAMELCASE)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_IN_CAMELCASE" expression="camelCase(FILE_WITHOUT_INJECTABLE)" defaultValue="" alwaysStopAt="true" />
    <variable name="FILE_WITHOUT_INJECTABLE" expression="regularExpression(fileNameWithoutExtension, &quot;.injectable&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="winbutnotawful" value="import React from &quot;react&quot;;&#10;import { observer } from &quot;mobx-react&quot;;&#10;import { withInjectables } from &quot;@lensapp/injectable-react&quot;;&#10;&#10;export type $FILE$Props = {};&#10;type Dependencies = {};&#10;&#10;const NonInjected$FILE$ = observer((props: $FILE$Props &amp; Dependencies) =&gt; &lt;div&gt;&lt;/div&gt;);&#10;&#10;export const $FILE$ = withInje$END$ctables&lt;Dependencies, $FILE$Props&gt;(&#10;  NonInjected$FILE$,&#10;&#10;  {&#10;    getProps: (di, props) =&gt; ({&#10;      ...props,&#10;      $DEPENDENCY$: di.inject($DEPENDENCY$Injectable),&#10;    }),&#10;  },&#10;);&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="FILE" expression="capitalize(camelCase(fileNameWithoutExtension))" defaultValue="" alwaysStopAt="true" />
    <variable name="DEPENDENCY" expression="" defaultValue="&quot;dependency&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="act" value="await act(async () =&gt; { &#10;  $SELECTION$ &#10;});" description="Wrap with act" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="renderProp" value="&lt;$ASD$&gt;&#10;  {() =&gt; (&#10;    $SELECTION$&#10;  )}&#10;&lt;/$ASD$&gt;&#10;" description="Wrap with render prop" toReformat="false" toShortenFQNames="true">
    <variable name="ASD" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="wrapinjc" value="export const $COMPONENT_NAME$ = getInjectableComponent({&#10;  id: &quot;$INJECTABLE_ID$&quot;,&#10;&#10;  Component: $ASD$&#10;});&#10;" description="Wrap with injectable component" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT_NAME" expression="capitalize(camelCase(regularExpression(fileNameWithoutExtension, &quot;.injectable&quot;, &quot;&quot;)))" defaultValue="" alwaysStopAt="true" />
    <variable name="INJECTABLE_ID" expression="lowercaseAndDash(COMPONENT_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="ASD" expression="egularExpression(SELECTION, &quot;/[']/&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="usei" value="const $NAME$ = useInject($INJECTABLE_NAME$);" description="useInject" toReformat="false" toShortenFQNames="true" useStaticImport="true">
    <variable name="INJECTABLE_NAME" expression="jsSuggestImportedEntityName()" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="regularExpression(INJECTABLE_NAME, &quot;(Injectable|InjectionToken)&quot;, &quot;&quot;)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>